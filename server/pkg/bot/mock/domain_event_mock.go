// Code generated by MockGen. DO NOT EDIT.
// Source: bot/domain/event.go
//
// Generated by this command:
//
//	mockgen -package=mock -source=bot/domain/event.go
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	domain "joubertredrat-tests/jobsity-dev-test-2k23/bot/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStockEvent is a mock of StockEvent interface.
type MockStockEvent struct {
	ctrl     *gomock.Controller
	recorder *MockStockEventMockRecorder
}

// MockStockEventMockRecorder is the mock recorder for MockStockEvent.
type MockStockEventMockRecorder struct {
	mock *MockStockEvent
}

// NewMockStockEvent creates a new mock instance.
func NewMockStockEvent(ctrl *gomock.Controller) *MockStockEvent {
	mock := &MockStockEvent{ctrl: ctrl}
	mock.recorder = &MockStockEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStockEvent) EXPECT() *MockStockEventMockRecorder {
	return m.recorder
}

// StockRequested mocks base method.
func (m *MockStockEvent) StockRequested(ctx context.Context, stock domain.Stock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StockRequested", ctx, stock)
	ret0, _ := ret[0].(error)
	return ret0
}

// StockRequested indicates an expected call of StockRequested.
func (mr *MockStockEventMockRecorder) StockRequested(ctx, stock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StockRequested", reflect.TypeOf((*MockStockEvent)(nil).StockRequested), ctx, stock)
}
