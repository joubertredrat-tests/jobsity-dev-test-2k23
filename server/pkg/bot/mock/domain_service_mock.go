// Code generated by MockGen. DO NOT EDIT.
// Source: bot/domain/service.go
//
// Generated by this command:
//
//	mockgen -package=mock -source=bot/domain/service.go
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	domain "joubertredrat-tests/jobsity-dev-test-2k23/bot/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStockQuote is a mock of StockQuote interface.
type MockStockQuote struct {
	ctrl     *gomock.Controller
	recorder *MockStockQuoteMockRecorder
}

// MockStockQuoteMockRecorder is the mock recorder for MockStockQuote.
type MockStockQuoteMockRecorder struct {
	mock *MockStockQuote
}

// NewMockStockQuote creates a new mock instance.
func NewMockStockQuote(ctrl *gomock.Controller) *MockStockQuote {
	mock := &MockStockQuote{ctrl: ctrl}
	mock.recorder = &MockStockQuoteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStockQuote) EXPECT() *MockStockQuoteMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockStockQuote) Get(ctx context.Context, stock domain.Stock) (domain.Stock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, stock)
	ret0, _ := ret[0].(domain.Stock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStockQuoteMockRecorder) Get(ctx, stock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStockQuote)(nil).Get), ctx, stock)
}
