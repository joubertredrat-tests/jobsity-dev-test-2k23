// Code generated by MockGen. DO NOT EDIT.
// Source: chat/domain/service.go
//
// Generated by this command:
//
//	mockgen -package=mock -source=chat/domain/service.go
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	domain "joubertredrat-tests/jobsity-dev-test-2k23/chat/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTokenService is a mock of TokenService interface.
type MockTokenService struct {
	ctrl     *gomock.Controller
	recorder *MockTokenServiceMockRecorder
}

// MockTokenServiceMockRecorder is the mock recorder for MockTokenService.
type MockTokenServiceMockRecorder struct {
	mock *MockTokenService
}

// NewMockTokenService creates a new mock instance.
func NewMockTokenService(ctrl *gomock.Controller) *MockTokenService {
	mock := &MockTokenService{ctrl: ctrl}
	mock.recorder = &MockTokenServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenService) EXPECT() *MockTokenServiceMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockTokenService) Check(ctx context.Context, userToken domain.UserToken) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx, userToken)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockTokenServiceMockRecorder) Check(ctx, userToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockTokenService)(nil).Check), ctx, userToken)
}

// Generate mocks base method.
func (m *MockTokenService) Generate(ctx context.Context, user domain.User) (domain.UserToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", ctx, user)
	ret0, _ := ret[0].(domain.UserToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockTokenServiceMockRecorder) Generate(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockTokenService)(nil).Generate), ctx, user)
}
